// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// User model with role management
model User {
  id                    Int             @id @default(autoincrement())
  name                  String
  email                 String          @unique
  password              String          // Store bcrypt hashed password
  role                  Role            @default(USER) // Role-based access
  display_name          String?
  mobile_number         String?         // Add the mobile number as an optional field
  created_at            DateTime        @default(now())
  updated_at            DateTime        @updatedAt
  sessions              Session[]
  accounts              Account[]
  people_submissions    People[]        @relation("UserSubmissions") // Link to People created by user
  updated_people        People[]        @relation("UserUpdates") // Link to People updated by user
  created_occupations   Occupation[]
  created_institutions  Institution[]
  created_locations     IncidentLocation[]
  created_stories       Story[]
  created_galleries     PhotoGallery[]
  created_documentaries Documentary[]
}


// People table for information about individuals in the system
model People {
  id                    Int                @id @default(autoincrement())
  name                  String
  age                   Int?
  occupation            Occupation?        @relation(fields: [occupation_id], references: [id])
  occupation_id         Int?
  institution           Institution?       @relation(fields: [institution_id], references: [id])
  institution_id        Int?
  address               String?
  fathers_name          String?
  mothers_name          String?
  date                  DateTime?
  date_of_death         DateTime?
  gender                String?
  story                 String?
  family_member_contact String?
  profile_picture       String?            // Single profile picture
  gallery               String[]           @default([])
  incident_location     IncidentLocation?  @relation(fields: [incident_location_id], references: [id])
  incident_location_id  Int?
  incident_type         IncidentType       // Enum for Death or Injured
  status                Status             @default(PENDING) // Pending or Verified
  documentary           String?
  created_at            DateTime           @default(now())
  updated_at            DateTime           @updatedAt
  submitted_by          User               @relation("UserSubmissions", fields: [submitted_by_id], references: [id])
  submitted_by_id       Int
  updated_by            User?              @relation("UserUpdates", fields: [updated_by_id], references: [id])
  updated_by_id         Int?               // Optional field, default is NULL
}

// Supporting tables for admin-controlled data
model Occupation {
  id                    Int       @id @default(autoincrement())
  title                 String
  created_by            User      @relation(fields: [created_by_id], references: [id])
  created_by_id         Int
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt
  people                People[]
}

model Institution {
  id                    Int       @id @default(autoincrement())
  title                 String
  created_by            User      @relation(fields: [created_by_id], references: [id])
  created_by_id         Int
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt
  people                People[]
}

model Story {
  id                    Int       @id @default(autoincrement())
  title                 String
  description           String
  image_url             String?
  created_by            User      @relation(fields: [created_by_id], references: [id])
  created_by_id         Int
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt
}

model PhotoGallery {
  id                    Int       @id @default(autoincrement())
  gallery_images        String[]  // Array of image names
  created_by            User      @relation(fields: [created_by_id], references: [id])
  created_by_id         Int
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt
}

model IncidentLocation {
  id                    Int       @id @default(autoincrement())
  title                 String
  created_by            User      @relation(fields: [created_by_id], references: [id])
  created_by_id         Int
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt
  people                People[]
}

model Documentary {
  id                    Int       @id @default(autoincrement())
  url                   String
  created_by            User      @relation(fields: [created_by_id], references: [id])
  created_by_id         Int
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt
}

// Session model for NextAuth.js
model Session {
  id           String   @id @default(cuid())
  userId       Int
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
  sessionToken String   @unique
}

// OAuth account model for NextAuth.js
model Account {
  id                 Int      @id @default(autoincrement())
  userId             Int
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider           String
  providerAccountId  String   @unique
  refresh_token      String?
  access_token       String?
  expires_at         Int?
}

model Visitor {
  id          Int       @id @default(autoincrement())
  ip_address  String    // Store the visitor's IP address
  country     String?   // Geolocation: country
  region      String?   // Geolocation: region/state
  city        String?   // Geolocation: city
  visit_count Int       @default(1) // Track the number of visits
  visited_at  DateTime  @default(now()) // Timestamp of the last visit
}

// Enums
enum Role {
  ADMIN
  VENDOR
  USER
}

enum IncidentType {
  DEATH
  INJURED
}

enum Status {
  PENDING
  VERIFIED
}
